#!/usr/bin/env bash
#
# Main executable shell script.

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
readonly CURRENT_DIR

# shellcheck source=/dev/null
source "${CURRENT_DIR}/config.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/packages/packages.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/functions/functions.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/commands/commands.sh"

#######################################
# Main shell script.
#
# Globals:
#   DOCKER_COMPOSE_FILE
#   PROJECT_DIR
#   PROJECT_NAME
#   PROPERTIES_FILE
#   SONARQUBE_DASHBOARD_URL
#   SONARSCANNER_DOCKER_NETWORK
#   SONARSCANNER_DOCKER_IMAGE
#   TEMPLATE_DIR
#
# Arguments:
#   User input
#
# Returns:
#   0 if SonarQube Docker Container is running.
#   1 if SonarQube Docker Container is not running or invalid user input.
#######################################
function main() {
  if [ $# == 0 ]; then
    if docker::is_container_running sonarqube; then
      info "SonarQube is running on " \
        "$(ansi --bold --white "${SONARQUBE_DASHBOARD_URL}")."

      exit 0
    else
      warning "SonarQube is not running."
      info "To start SonarQube use the following command "\
        "$(ansi --bold --white sonarqube up)" \
        "or $(ansi --bold --white sonarqube help)" \
        "to view a list of all available commands."

      exit 1
    fi
  fi

  # loop through user input.
  for arg in "$@"; do
    shift
    case "$arg" in
      dashboard)
        command::dashboard "${SONARQUBE_DASHBOARD_URL}"
        break;;
      down)
        docker_compose::command \
          --file="${DOCKER_COMPOSE_FILE}" \
          --project_name="${PROJECT_NAME}" \
          down
        break;;
      help)
        command::help --project_dir="${PROJECT_DIR}"
        break;;
      publish)
        command::publish \
          --properties_file="${PROPERTIES_FILE}" \
          --template_dir="${TEMPLATE_DIR}" \
          "$1"
        break;;
      scan)
        command::scan \
          --properties_file="${PROPERTIES_FILE}" \
          --docker_network="${SONARSCANNER_DOCKER_NETWORK}" \
          --docker_image="${SONARSCANNER_DOCKER_IMAGE}"
        break;;
      self-update)
        command::self_update --project_dir="${PROJECT_DIR}"
        break;;
      up)
        docker_compose::command \
          --file="${DOCKER_COMPOSE_FILE}" \
          --project_name="${PROJECT_NAME}" \
          up -d
        break;;
      *)
        error "Command $(ansi --bold --white "${arg}") is not supported."
        exit 1;;
    esac
  done
}

# Verify operating system is supported...
is_operating_system_supported

# Ensure that Docker is running...
if ! docker::is_docker_running; then
  error "Docker is not running. Please run Docker."

  exit 1
fi

# Execute main function...
main "$@"
