#!/usr/bin/env bash
#
# Main executable shell script.

set -e

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
readonly CURRENT_DIR

# shellcheck source=/dev/null
source "${CURRENT_DIR}/config.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/packages/packages.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/functions/functions.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/commands/commands.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/messages/messages.sh"

#######################################
# Main shell script.
#
# Globals:
#   DOCKER_COMPOSE_FILE
#   PROJECT_DIR
#   PROJECT_NAME
#   PROPERTIES_FILE
#   SONARQUBE_DASHBOARD_URL
#   SONARSCANNER_DOCKER_NETWORK
#   SONARSCANNER_DOCKER_IMAGE
#   TEMPLATE_DIR
#
# Arguments:
#   User input
#
# Returns:
#   0 if SonarQube Docker Container is running.
#   1 invalid user input.
#######################################
function main() {
  message::supportUkraine

  if [ $# == 0 ] || [ "${1}" == 'help' ]; then
    command::help --project_dir="${PROJECT_DIR}"

    message::status "${SONARQUBE_DASHBOARD_URL}"
    exit 0
  fi

  # loop through user input.
  for arg in "$@"; do
    shift
    case "$arg" in
      dashboard)
        command::dashboard "${SONARQUBE_DASHBOARD_URL}"
        break;;
      down)
        docker_compose::command \
          --file="${DOCKER_COMPOSE_FILE}" \
          --project_name="${PROJECT_NAME}" \
          down

        message::status "${SONARQUBE_DASHBOARD_URL}"
        break;;
      publish)
        command::publish \
          --properties_file="${PROPERTIES_FILE}" \
          --template_dir="${TEMPLATE_DIR}" \
          "$1"
        break;;
      scan)
        command::scan \
          --properties_file="${PROPERTIES_FILE}" \
          --docker_network="${SONARSCANNER_DOCKER_NETWORK}" \
          --docker_image="${SONARSCANNER_DOCKER_IMAGE}"
        break;;
      self-update)
        command::self_update --project_dir="${PROJECT_DIR}"
        break;;
      up)
        docker_compose::command \
          --file="${DOCKER_COMPOSE_FILE}" \
          --project_name="${PROJECT_NAME}" \
          up -d

        message::status "${SONARQUBE_DASHBOARD_URL}"
        break;;
      *)
        error "Command $(ansi --bold --white "${arg}") is not supported."
        output "To view a list of all available commands use the following:" \
          "$(ansi --bold --white sonarqube help)."

        exit 1;;
    esac
  done
}

# Verify operating system is supported...
is_operating_system_supported

# Ensure that Docker is running...
if ! docker::is_docker_running; then
  error --newline=bottom "Docker is not running!"
  output "$(ansi --bold --white "Localhost SonarQube") requires Docker to run" \
    "SonarQube and SonarScanner. Please start Docker."

  output "If you don't have Docker installed, please visit" \
    "$(ansi --bold --white https://www.docker.com/download) to download Docker."

  exit 1
fi

# Execute main function...
main "$@"
