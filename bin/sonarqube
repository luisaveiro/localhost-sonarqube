#!/usr/bin/env bash
#
# Main executable shell script.

readonly CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/packages/packages.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/config.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/functions.sh"

# shellcheck source=/dev/null
source "${CURRENT_DIR}/commands.sh"

#######################################
# Main shell script.
#
# Globals:
#   SONARQUBE_DASHBOARD_URL
#
# Arguments:
#   User input
#
# Returns:
#   0 if SonarQube Docker Container is running.
#   1 if SonarQube Docker Container is not running or invalid user input.
#######################################
function main() {
  if [ $# == 0 ]; then
    if ! is_sonarqube_docker_containers_running; then
      info "SonarQube is running on $(ansi --bold --white "${SONARQUBE_DASHBOARD_URL}")."

      exit 0
    else
      warning "SonarQube is not running."
      info "Use the following commands: $(ansi --bold --white sonarqube up)."

      exit 1
    fi
  fi

  # loop through user input.
  for arg in "$@"; do
    shift
    case "$arg" in
      dashboard)
        command::dashboard
        break;;
      down)
        docker_compose::command --file="${DOCKER_COMPOSE_FILE}" down
        break;;
      publish)
        command::publish "$1"
        break;;
      scan)
        command::scan
        break;;
      up)
        docker_compose::command --file="${DOCKER_COMPOSE_FILE}" up -d
        break;;
      *)
        error "Command $(ansi --bold --white "${arg}") is not supported."
        exit 1;;
    esac
  done
}

# Verify operating system is supported...
is_operating_system_supported

# Ensure that Docker is running...
is_docker_running

# Execute main function...
main "$@"
